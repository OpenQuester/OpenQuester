{
  "openapi": "3.1.0",
  "info": {
    "title": "OpenQuester API",
    "version": "0.17.0"
  },
  "security": [
    {
      "SessionAuth": []
    }
  ],
  "paths": {
    "/v1/files/{filename}": {
      "get": {
        "summary": "Get link to file from server",
        "tags": ["Files"],
        "parameters": [
          {
            "name": "filename",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "examples": ["some_filename.jpg"]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get link that allows you to view the file",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileLinkResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad filename",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadFilenameResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Get link to upload file on server",
        "tags": ["Files"],
        "parameters": [
          {
            "name": "filename",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "examples": ["some_filename.jpg"]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get link that allows you to put the file",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileUploadLinkResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad filename",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadFilenameResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete file from bucket",
        "tags": ["Files"],
        "parameters": [
          {
            "name": "filename",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "examples": ["some_filename.jpg"]
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Delete request send successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteRequestResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad filename",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadFilenameResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/packages": {
      "post": {
        "summary": "Get upload links for every file in `content.json`",
        "tags": ["Packages"],
        "requestBody": {
          "description": "Data for package creation",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PackageCreationInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns object of key-values where key is filename, and value is file upload link",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PackageUploadResponse"
                }
              }
            }
          },
          "400": {
            "description": "Package is corrupted!",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PackageCorruptedResponse"
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "Get all packages",
        "tags": ["Packages"],
        "parameters": [
          {
            "name": "sortBy",
            "in": "query",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/PackagesSortBy"
            }
          },
          {
            "name": "order",
            "in": "query",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/OrderDirection"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/PaginationLimit"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/PaginationOffset"
            }
          },
          {
            "name": "title",
            "in": "query",
            "description": "Search by package title, not case sensitive",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/PaginationTitle"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get all packages data successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedPackages"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/packages/{id}": {
      "get": {
        "summary": "Get package by id",
        "tags": ["Packages"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get package data successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PackageResponse"
                }
              }
            }
          },
          "404": {
            "description": "Package not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PackageNotFoundResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/users/{id}": {
      "get": {
        "summary": "Get user info by id",
        "tags": ["Users"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get user data successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseUser"
                }
              }
            }
          },
          "401": {
            "description": "Invalid or expired session",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidSessionResponse"
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserNotFoundResponse"
                }
              }
            }
          }
        }
      },
      "patch": {
        "summary": "Update user by id",
        "tags": ["Users"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InputUpdateUser"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Update user data successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseUser"
                }
              }
            }
          },
          "403": {
            "description": "Permission denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PermissionDeniedResponse"
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserNotFoundResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete user by id",
        "tags": ["Users"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "User deleted successfully"
          },
          "403": {
            "description": "Permission denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PermissionDeniedResponse"
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserNotFoundResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/users/": {
      "get": {
        "summary": "Get all users info",
        "tags": ["Users"],
        "parameters": [
          {
            "name": "sortBy",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/UsersSortBy"
            }
          },
          {
            "name": "order",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/OrderDirection"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/PaginationLimit"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/PaginationOffset"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get all users data successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedUsers"
                }
              }
            }
          },
          "403": {
            "description": "Permission denied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PermissionDeniedResponse"
                }
              }
            }
          },
          "404": {
            "description": "Users not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserNotFoundResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/me": {
      "get": {
        "summary": "Get info about current user",
        "tags": ["Users"],
        "responses": {
          "200": {
            "description": "Get user data successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseUser"
                }
              }
            }
          },
          "401": {
            "description": "Invalid session",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidSessionResponse"
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserNotFoundResponse"
                }
              }
            }
          }
        }
      },
      "patch": {
        "summary": "Update current user",
        "tags": ["Users"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InputUpdateUser"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Update user data successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseUser"
                }
              }
            }
          },
          "401": {
            "description": "Invalid session",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidSessionResponse"
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserNotFoundResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete current user",
        "tags": ["Users"],
        "responses": {
          "204": {
            "description": "User deleted successfully"
          },
          "401": {
            "description": "Invalid session",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidSessionResponse"
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserNotFoundResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/auth/oauth2": {
      "post": {
        "summary": "Validate oauth2 token",
        "tags": ["Auth"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InputOauthLogin"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User logged in successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseUser"
                }
              }
            }
          },
          "400": {
            "description": "User have error during logging",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GeneralErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/auth/logout": {
      "get": {
        "summary": "Logout user",
        "tags": ["Auth"],
        "responses": {
          "200": {
            "description": "User logged out successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LogoutResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/auth/socket": {
      "post": {
        "summary": "Authorize socket.io connection",
        "tags": ["Auth"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InputSocketIOAuth"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User logged in successfully"
          },
          "400": {
            "description": "User have error during logging",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GeneralErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/games": {
      "get": {
        "summary": "Get all games",
        "tags": ["Games"],
        "parameters": [
          {
            "name": "sortBy",
            "in": "query",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/GamesSortBy"
            }
          },
          {
            "name": "order",
            "in": "query",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/OrderDirection"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/PaginationLimit"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/PaginationOffset"
            }
          },
          {
            "name": "createdAtMin",
            "in": "query",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/FilterCreatedAtMin"
            }
          },
          {
            "name": "createdAtMax",
            "in": "query",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/FilterCreatedAtMax"
            }
          },
          {
            "name": "isPrivate",
            "in": "query",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/FilterIsPrivate"
            }
          },
          {
            "name": "titlePrefix",
            "in": "query",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/PaginationTitlePrefix"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get all games successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedGames"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create a new game",
        "tags": ["Games"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GameCreateData"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Game created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GameListItem"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/games/{gameId}": {
      "get": {
        "summary": "Get game by gameId",
        "tags": ["Games"],
        "parameters": [
          {
            "name": "gameId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get game data successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GameListItem"
                }
              }
            }
          },
          "404": {
            "description": "Game not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GameNotFoundResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete game",
        "tags": ["Games"],
        "parameters": [
          {
            "name": "gameId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Game deleted successfully"
          },
          "400": {
            "description": "Game not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GameNotFoundResponse"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "SessionAuth": {
        "type": "apiKey",
        "in": "cookie",
        "name": "connect.sid",
        "description": "Session-based authentication using cookies."
      }
    },
    "schemas": {
      "PageInfo": {
        "type": "object",
        "properties": {
          "total": {
            "type": "integer",
            "examples": [1000]
          }
        }
      },
      "PackageCreationInput": {
        "type": "object",
        "properties": {
          "content": {
            "$ref": "#/components/schemas/PackageCreateInputData"
          }
        },
        "required": ["content"]
      },
      "ResponseUser": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "examples": [1]
          },
          "username": {
            "type": "string",
            "examples": ["John"]
          },
          "email": {
            "type": ["string", "null"],
            "examples": ["john.doe@gmail.com"]
          },
          "discordId": {
            "type": ["string", "null"],
            "examples": ["123123123123"]
          },
          "birthday": {
            "type": ["string", "null"],
            "format": "date",
            "examples": ["2024-01-01"]
          },
          "avatar": {
            "type": ["string", "null"],
            "description": "link on file GET",
            "examples": [
              "https://s3.example.com/openquester-sample-bucket/e/ec/ec65cd3756490723f8bcc3bc432b94a7"
            ]
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "examples": ["2024-01-01T00:00:00Z"]
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "examples": ["2024-01-01T00:00:00Z"]
          },
          "isDeleted": {
            "type": "boolean",
            "examples": [false]
          },
          "permissions": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer",
                  "examples": [1]
                },
                "name": {
                  "type": "string",
                  "examples": ["get_all_users"]
                }
              }
            }
          }
        }
      },
      "InputOauthLogin": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string",
            "examples": ["HSXxyt6nrbW5Gtqw5BWfHPYk9lxDOj"]
          },
          "tokenSchema": {
            "type": ["string", "null"],
            "examples": ["Bearer"]
          },
          "oauthProvider": {
            "type": "string",
            "examples": ["discord"],
            "enum": ["discord"]
          }
        }
      },
      "InputUpdateUser": {
        "type": "object",
        "properties": {
          "username": {
            "type": ["string", "null"],
            "examples": ["John Doe"]
          },
          "email": {
            "type": ["string", "null"],
            "examples": ["user@example.com"],
            "format": "email"
          },
          "birthday": {
            "type": ["string", "null"],
            "format": "date",
            "examples": ["2024-01-01"]
          },
          "avatar": {
            "type": ["string", "null"],
            "examples": ["filename_of_file_in_bucket"]
          }
        }
      },
      "LogoutResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "examples": ["Logout successful"]
          }
        }
      },
      "GameListItem": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "examples": ["AH2S"]
          },
          "createdBy": {
            "$ref": "#/components/schemas/ShortUserInfo"
          },
          "title": {
            "type": "string",
            "examples": ["Game Title"]
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "examples": ["2024-01-01T00:00:00Z"]
          },
          "ageRestriction": {
            "$ref": "#/components/schemas/AgeRestriction"
          },
          "isPrivate": {
            "type": "boolean",
            "examples": [false]
          },
          "currentRound": {
            "type": ["integer", "null"],
            "examples": [0]
          },
          "playedQuestions": {
            "type": ["integer", "null"],
            "examples": [0]
          },
          "players": {
            "type": "integer",
            "examples": [5]
          },
          "maxPlayers": {
            "type": "integer",
            "examples": [10]
          },
          "startedAt": {
            "type": ["string", "null"],
            "format": "date-time",
            "examples": ["2024-01-01T00:00:00Z"]
          },
          "finishedAt": {
            "type": ["string", "null"],
            "format": "date-time",
            "examples": ["2024-01-01T02:00:00Z"]
          },
          "package": {
            "$ref": "#/components/schemas/PackageItem"
          }
        }
      },
      "GameCreateData": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "examples": ["Game Title"]
          },
          "packageId": {
            "type": "integer",
            "minimum": 0,
            "examples": [1]
          },
          "isPrivate": {
            "type": "boolean",
            "examples": [false]
          },
          "ageRestriction": {
            "$ref": "#/components/schemas/AgeRestriction"
          },
          "maxPlayers": {
            "type": "integer",
            "minimum": 2,
            "maximum": 15,
            "examples": [10]
          }
        }
      },
      "ShortUserInfo": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "examples": [1]
          },
          "username": {
            "type": "string",
            "examples": ["John"]
          }
        }
      },
      "PackageTag": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "examples": [15]
          },
          "tag": {
            "type": "string",
            "description": "A single tag for the package",
            "examples": ["anime"]
          }
        },
        "required": ["tag"],
        "description": "Individual tag object"
      },
      "PaginatedPackages": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PackageListItem"
            }
          },
          "pageInfo": { "$ref": "#/components/schemas/PageInfo" }
        }
      },
      "PackageListItem": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "examples": [1]
          },
          "title": {
            "type": "string",
            "examples": ["Package Title"]
          },
          "description": {
            "type": ["string", "null"],
            "examples": [
              "Package description, should be longer than title, probably"
            ]
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "examples": ["2024-01-01T00:00:00Z"]
          },
          "author": {
            "$ref": "#/components/schemas/ShortUserInfo"
          },
          "ageRestriction": {
            "$ref": "#/components/schemas/AgeRestriction",
            "description": "Package age restriction"
          },
          "language": {
            "type": ["string", "null"],
            "examples": ["en"]
          },
          "logo": {
            "oneOf": [
              { "$ref": "#/components/schemas/PackageLogoFileItem" },
              { "type": "null" }
            ],
            "description": "Logo file for the package"
          },
          "tags": {
            "type": ["array", "null"],
            "items": {
              "$ref": "#/components/schemas/PackageTag"
            },
            "description": "Tags for the package. Can be null or an array of tag objects",
            "examples": [
              [
                { "id": 18, "tag": "anime" },
                { "id": 19, "tag": "movie" },
                { "id": 20, "tag": "general" },
                { "id": 21, "tag": "games" }
              ],
              [
                { "id": 22, "tag": "trivia" },
                { "id": 23, "tag": "fun" }
              ],
              null
            ]
          }
        }
      },
      "PackageResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "examples": [1]
          },
          "title": {
            "type": "string",
            "examples": ["Package Title"]
          },
          "description": {
            "type": ["string", "null"],
            "examples": [
              "Package description, should be longer than title, probably"
            ]
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "examples": ["2024-01-01T00:00:00Z"]
          },
          "author": {
            "$ref": "#/components/schemas/ShortUserInfo"
          },
          "ageRestriction": {
            "$ref": "#/components/schemas/AgeRestriction",
            "description": "Package age restriction"
          },
          "language": {
            "type": ["string", "null"],
            "examples": ["en"]
          },
          "logo": {
            "oneOf": [
              { "$ref": "#/components/schemas/PackageLogoFileItem" },
              { "type": "null" }
            ],
            "description": "Logo file for the package"
          },
          "rounds": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/PackageRound" },
            "description": "Rounds in the package"
          },
          "tags": {
            "type": ["array", "null"],
            "items": {
              "$ref": "#/components/schemas/PackageTag"
            },
            "description": "Tags for the package. Can be null or an array of tag objects",
            "examples": [
              [
                { "id": 18, "tag": "anime" },
                { "id": 19, "tag": "movie" },
                { "id": 20, "tag": "general" },
                { "id": 21, "tag": "games" }
              ],
              [
                { "id": 22, "tag": "trivia" },
                { "id": 23, "tag": "fun" }
              ],
              null
            ]
          }
        }
      },
      "PackageItem": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "examples": [1]
          },
          "title": {
            "type": "string",
            "examples": ["Package Title"]
          },
          "description": {
            "type": ["string", "null"],
            "examples": [
              "Package description, should be longer than title, probably"
            ]
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "examples": ["2024-01-01T00:00:00Z"]
          },
          "author": {
            "$ref": "#/components/schemas/ShortUserInfo"
          },
          "ageRestriction": {
            "$ref": "#/components/schemas/AgeRestriction",
            "description": "Package age restriction"
          },
          "language": {
            "type": ["string", "null"],
            "examples": ["en"]
          },
          "logo": {
            "oneOf": [
              { "$ref": "#/components/schemas/PackageLogoFileItem" },
              { "type": "null" }
            ],
            "description": "Logo file for the package"
          },
          "roundsCount": {
            "type": "integer",
            "examples": [5]
          },
          "questionsCount": {
            "type": "integer",
            "examples": [183]
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string",
              "examples": ["Anime", "General"]
            }
          }
        }
      },
      "PaginatedUsers": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ResponseUser"
            }
          },
          "pageInfo": {
            "$ref": "#/components/schemas/PageInfo"
          }
        }
      },
      "PaginatedGames": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GameListItem"
            }
          },
          "pageInfo": {
            "$ref": "#/components/schemas/PageInfo"
          }
        }
      },
      "OrderDirection": {
        "type": "string",
        "enum": ["asc", "desc"],
        "examples": ["asc"],
        "default": "desc"
      },
      "PaginationLimit": {
        "type": "integer",
        "examples": [10],
        "minimum": 1,
        "maximum": 50,
        "default": 10
      },
      "PaginationOffset": {
        "type": "integer",
        "examples": [0],
        "minimum": 0
      },
      "FilterCreatedAtMin": {
        "type": "string",
        "format": "date-time",
        "examples": ["2024-01-01T00:00:00Z"]
      },
      "FilterCreatedAtMax": {
        "type": "string",
        "format": "date-time",
        "examples": ["2024-01-01T12:00:00Z"]
      },
      "FilterIsPrivate": {
        "type": "boolean",
        "examples": [false]
      },
      "PaginationTitlePrefix": {
        "type": "string",
        "description": "Search by title prefix (start)",
        "examples": ["Anime"]
      },
      "PaginationTitle": {
        "type": "string",
        "examples": ["Gays"]
      },
      "GamesSortBy": {
        "type": "string",
        "enum": [
          "id",
          "title",
          "createdAt",
          "createdBy",
          "maxPlayers",
          "players",
          "startedAt"
        ],
        "examples": ["createdAt"],
        "default": "createdAt"
      },
      "UsersSortBy": {
        "type": "string",
        "enum": ["id", "is_deleted", "created_at", "username", "email"],
        "examples": ["createdAt"],
        "default": "createdAt"
      },
      "PackagesSortBy": {
        "type": "string",
        "enum": ["id", "title", "created_at", "author"],
        "examples": ["created_at"],
        "default": "created_at"
      },
      "PackageUploadResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "examples": [1]
          },
          "uploadLinks": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "examples": [
              { "uniqueIdentifier": "https://example.com/upload/file.jpg" }
            ]
          }
        }
      },
      "FileLinkResponse": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string",
            "examples": ["http://localhost:9000/file-get-link"]
          }
        }
      },
      "BadFilenameResponse": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "examples": ["Bad filename"]
          }
        }
      },
      "FileUploadLinkResponse": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string",
            "examples": ["http://localhost:9000/file-upload-link"]
          }
        }
      },
      "DeleteRequestResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "examples": ["Delete request sent"]
          }
        }
      },
      "PackageCorruptedResponse": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "examples": ["Package is corrupted!"]
          }
        }
      },
      "BadRequestResponse": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "examples": ["Bad request"]
          }
        }
      },
      "PackageNotFoundResponse": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "examples": ["Package not found"]
          }
        }
      },
      "InvalidSessionResponse": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "examples": ["Session invalid or expired"]
          }
        }
      },
      "UserNotFoundResponse": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "examples": ["User not found"]
          }
        }
      },
      "PermissionDeniedResponse": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "examples": ["You don't have permission to perform this action"]
          }
        }
      },
      "GeneralErrorResponse": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "examples": ["Authentication is failed, please try again"]
          }
        }
      },
      "GameNotFoundResponse": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "examples": ["Game not found"]
          }
        }
      },
      "GameEventSubscription": {
        "type": "object",
        "discriminator": {
          "propertyName": "event",
          "mapping": {
            "created": "#/components/schemas/GameUpdateEventSubscription",
            "changed": "#/components/schemas/GameUpdateEventSubscription",
            "started": "#/components/schemas/GameUpdateEventSubscription",
            "deleted": "#/components/schemas/GameDeleteEventSubscription"
          }
        },
        "oneOf": [
          { "$ref": "#/components/schemas/GameUpdateEventSubscription" },
          { "$ref": "#/components/schemas/GameDeleteEventSubscription" }
        ]
      },
      "GameUpdateEventSubscription": {
        "type": "object",
        "properties": {
          "event": {
            "type": "string",
            "enum": ["created", "changed", "started"]
          },
          "data": {
            "$ref": "#/components/schemas/GameListItem"
          }
        },
        "required": ["type", "event", "data"]
      },
      "GameDeleteEventSubscription": {
        "type": "object",
        "properties": {
          "event": {
            "type": "string",
            "enum": ["deleted"]
          },
          "data": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              }
            },
            "required": ["id"]
          }
        },
        "required": ["type", "event", "data"]
      },
      "AgeRestriction": {
        "type": "string",
        "enum": ["A18", "A16", "A12", "NONE"],
        "default": "NONE",
        "description": "Age restriction",
        "examples": ["A18"]
      },
      "PackageFileType": {
        "type": ["string", "null"],
        "enum": ["video", "audio", "image"],
        "description": "Type of media file for package-related files"
      },
      "QuestionType": {
        "type": "string",
        "enum": ["simple", "stake", "secret", "noRisk", "hidden", "choice"],
        "default": "simple",
        "description": "Type of question within a package"
      },
      "QuestionSubType": {
        "type": "string",
        "enum": ["simple", "customPrice", "empty", "forEveryone"],
        "description": "Possible subType of given question"
      },
      "QuestionShowDelay": {
        "type": "integer",
        "description": "Delay before showing options in milliseconds",
        "examples": [3000]
      },
      "QuestionPriceMultiplier": {
        "type": "string",
        "description": "Multiplier for question price nominal, so if price 200 with 2x multiplier it will give +400 and -0, depends if answer correct",
        "default": "1.5",
        "examples": ["0.5", "1.25", "1.5", "2"]
      },
      "QuestionMaxPrice": {
        "type": ["integer", "null"],
        "description": "Maximum price for the stake question, most useful when type is forEveryone - Does not allow top players to go all-in and win. Typically maxPrice can be 2x or 3x of nominal price",
        "examples": [1000]
      },
      "QuestionAllowedPrices": {
        "type": ["array", "null"],
        "items": { "type": "integer" },
        "minItems": 2,
        "maxItems": 5,
        "examples": [
          [200, 1000],
          [100, 500, 1000]
        ],
        "description": "Allowed price options for customPrice subtype. Maximum 5 prices to choose"
      },
      "QuestionChoiceAnswers": {
        "type": "object",
        "properties": {
          "id": {
            "type": ["integer", "null"],
            "examples": [99]
          },
          "order": {
            "$ref": "#/components/schemas/PackageEntitiesOrder"
          },
          "text": {
            "type": ["string", "null"],
            "description": "Text of the answer option"
          },
          "file": {
            "oneOf": [
              { "$ref": "#/components/schemas/FileItem" },
              { "type": "null" }
            ],
            "description": "File associated with the answer option"
          }
        },
        "description": "Multiple choice options; minimum 2, maximum 8 answers",
        "examples": [
          {
            "text": "Option 1",
            "file": null
          },
          {
            "text": "Option 2",
            "file": null
          },
          {
            "text": "Option 3 with image",
            "file": {
              "id": 227,
              "md5": "f99d8c12300b204as800998ecf90777",
              "type": "image",
              "link": "https://example.com/file123"
            }
          },
          {
            "text": "Option 4",
            "file": null
          }
        ]
      },
      "QuestionAnswerText": {
        "type": ["string", "null"],
        "description": "Correct answer text",
        "examples": ["In Ukraine"]
      },
      "QuestionTransferType": {
        "type": "string",
        "enum": ["any", "exceptCurrent"],
        "default": "any",
        "description": "Transfer type for secret questions",
        "examples": ["any"]
      },
      "FileInput": {
        "type": "object",
        "properties": {
          "md5": {
            "type": "string",
            "description": "MD5 hash of the file",
            "examples": ["d41d8cd98f00b204e9800998ecf8427e"]
          },
          "type": {
            "$ref": "#/components/schemas/PackageFileType"
          }
        },
        "required": ["md5", "type"],
        "description": "Basic file metadata for upload, used in place of full File model for input"
      },
      "FileItem": {
        "type": "object",
        "properties": {
          "id": {
            "type": ["integer", "null"],
            "examples": [727]
          },
          "md5": {
            "type": "string",
            "description": "MD5 hash of the file",
            "examples": ["d41d8cd98f00b204e9800998ecf8427e"]
          },
          "type": {
            "$ref": "#/components/schemas/PackageFileType"
          },
          "link": {
            "type": ["string", "null"],
            "description": "GET link for file",
            "examples": ["https://example.com/file123"]
          }
        },
        "required": ["md5"],
        "description": "Basic file metadata"
      },
      "PackageLogoFileInput": {
        "type": ["object", "null"],
        "properties": {
          "file": {
            "$ref": "#/components/schemas/FileInput"
          }
        },
        "description": "Logo file structure for package creation. Only images acceptable"
      },
      "PackageLogoFileItem": {
        "type": ["object", "null"],
        "properties": {
          "file": {
            "$ref": "#/components/schemas/FileItem"
          }
        },
        "required": ["file"],
        "description": "Logo file structure for package creation. Only images acceptable"
      },
      "PackageEntitiesOrder": {
        "type": "integer",
        "description": "Order of the round/theme/question file in package data, should be unique, starting from 0",
        "examples": [1, 2, 3]
      },
      "PackageQuestionFile": {
        "type": "object",
        "properties": {
          "id": {
            "type": ["integer", "null"],
            "examples": [69]
          },
          "order": {
            "$ref": "#/components/schemas/PackageEntitiesOrder"
          },
          "file": {
            "$ref": "#/components/schemas/FileItem"
          },
          "displayTime": {
            "type": ["integer", "null"],
            "description": "Display duration in milliseconds",
            "examples": [5000]
          }
        },
        "required": ["file", "displayTime"],
        "description": "Question media file structure for package creation"
      },
      "PackageQuestion": {
        "type": "object",
        "properties": {
          "id": {
            "type": ["integer", "null"],
            "examples": [187]
          },
          "order": {
            "$ref": "#/components/schemas/PackageEntitiesOrder"
          },
          "price": {
            "type": ["integer", "null"],
            "description": "Price is null only if price is hidden",
            "examples": [200, null]
          },
          "isHidden": {
            "type": "boolean",
            "default": false,
            "description": "Whether the question is hidden",
            "examples": [false]
          },
          "text": {
            "type": ["string", "null"],
            "description": "Question text",
            "examples": ["Where is Kyiv located?"]
          },
          "answerHint": {
            "type": ["string", "null"],
            "description": "Hint for the answer",
            "examples": ["It's in Europe"]
          },
          "answerText": {
            "oneOf": [
              { "$ref": "#/components/schemas/QuestionAnswerText" },
              { "type": "null" }
            ]
          },
          "answerDelay": {
            "type": ["integer", "null"],
            "description": "Delay in milliseconds before being able to answer, if applicable",
            "default": 4000,
            "examples": [7000]
          },
          "questionComment": {
            "type": ["string", "null"],
            "description": "Comment or note about the question",
            "examples": ["You have to say full country name"]
          },
          "questionFiles": {
            "oneOf": [
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PackageQuestionFile"
                }
              },
              { "type": "null" }
            ]
          },
          "answerFiles": {
            "oneOf": [
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PackageQuestionFile"
                }
              },
              { "type": "null" }
            ]
          }
        },
        "required": ["price", "order", "type"],
        "description": "Base properties for all question types"
      },
      "ChoiceQuestion": {
        "allOf": [
          { "$ref": "#/components/schemas/PackageQuestion" },
          {
            "type": "object",
            "properties": {
              "type": { "type": "string", "enum": ["choice"] },
              "subType": { "const": "simple" },
              "showDelay": {
                "$ref": "#/components/schemas/QuestionShowDelay"
              },
              "answers": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/QuestionChoiceAnswers"
                }
              }
            },
            "required": ["showDelay", "answers"],
            "description": "Choice question type"
          }
        ]
      },
      "SecretQuestion": {
        "allOf": [
          { "$ref": "#/components/schemas/PackageQuestion" },
          {
            "type": "object",
            "properties": {
              "type": { "type": "string", "enum": ["secret"] },
              "subType": {
                "type": "string",
                "enum": ["simple", "customPrice"],
                "description": "Subtype of the secret question. customPrice means player can choose cost of question",
                "examples": ["customPrice"]
              },
              "allowedPrices": {
                "$ref": "#/components/schemas/QuestionAllowedPrices"
              },
              "transferType": {
                "$ref": "#/components/schemas/QuestionTransferType"
              }
            },
            "required": ["subType", "transferType"],
            "if": {
              "properties": { "subType": { "const": "customPrice" } }
            },
            "then": {
              "required": ["allowedPrices"]
            },
            "description": "Secret question type. allowedPrices required only if subType is customPrice"
          }
        ]
      },
      "NoRiskQuestion": {
        "allOf": [
          { "$ref": "#/components/schemas/PackageQuestion" },
          {
            "type": "object",
            "properties": {
              "type": { "type": "string", "enum": ["noRisk"] },
              "subType": {
                "type": "string",
                "enum": ["simple", "forEveryone"],
                "description": "Subtype of the no-risk question. forEveryone means everyone answers it, basically giving chances for everyone, instead of one player",
                "examples": ["forEveryone"]
              },
              "priceMultiplier": {
                "$ref": "#/components/schemas/QuestionPriceMultiplier"
              }
            },
            "required": ["subType", "priceMultiplier"],
            "description": "No-risk question type"
          }
        ]
      },
      "SimpleQuestion": {
        "allOf": [
          { "$ref": "#/components/schemas/PackageQuestion" },
          {
            "type": "object",
            "properties": {
              "type": { "type": "string", "enum": ["simple"] }
            },
            "description": "Simple question type"
          }
        ]
      },
      "StakeQuestion": {
        "allOf": [
          { "$ref": "#/components/schemas/PackageQuestion" },
          {
            "type": "object",
            "properties": {
              "type": { "type": "string", "enum": ["stake"] },
              "subType": {
                "type": "string",
                "enum": ["simple", "forEveryone"],
                "description": "Subtype of the stake question. simple is basically auction. forEveryone means everyone place some amount of money and write answer",
                "default": "simple",
                "examples": ["simple"]
              },
              "maxPrice": {
                "$ref": "#/components/schemas/QuestionMaxPrice"
              }
            },
            "required": ["subType", "maxPrice"]
          }
        ]
      },
      "HiddenQuestion": {
        "allOf": [
          { "$ref": "#/components/schemas/PackageQuestion" },
          {
            "type": "object",
            "properties": {
              "type": { "type": "string", "enum": ["hidden"] }
            },
            "description": "Hidden question type"
          }
        ]
      },
      "PackageQuestionUnion": {
        "oneOf": [
          { "$ref": "#/components/schemas/SimpleQuestion" },
          { "$ref": "#/components/schemas/StakeQuestion" },
          { "$ref": "#/components/schemas/SecretQuestion" },
          { "$ref": "#/components/schemas/NoRiskQuestion" },
          { "$ref": "#/components/schemas/ChoiceQuestion" },
          { "$ref": "#/components/schemas/HiddenQuestion" }
        ],
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "simple": "#/components/schemas/SimpleQuestion",
            "stake": "#/components/schemas/StakeQuestion",
            "secret": "#/components/schemas/SecretQuestion",
            "noRisk": "#/components/schemas/NoRiskQuestion",
            "choice": "#/components/schemas/ChoiceQuestion",
            "hidden": "#/components/schemas/HiddenQuestion"
          }
        },
        "description": "Polymorphic question union for all question types"
      },
      "PackageTheme": {
        "type": "object",
        "properties": {
          "id": {
            "type": ["integer", "null"],
            "examples": [92]
          },
          "order": {
            "$ref": "#/components/schemas/PackageEntitiesOrder"
          },
          "name": {
            "type": "string",
            "description": "Name of the theme",
            "examples": ["Opening", "Ending", "Science"]
          },
          "description": {
            "type": ["string", "null"],
            "description": "Description of the theme",
            "examples": [
              "In this theme you have to guess anime by it's opening song"
            ]
          },
          "questions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PackageQuestionUnion"
            },
            "description": "Questions in the theme"
          }
        },
        "required": ["name", "order", "questions"],
        "description": "Theme structure for package"
      },
      "PackageRound": {
        "type": "object",
        "properties": {
          "id": {
            "type": ["integer", "null"],
            "examples": [17]
          },
          "order": {
            "$ref": "#/components/schemas/PackageEntitiesOrder"
          },
          "name": {
            "type": "string",
            "description": "Name of the round",
            "examples": ["Round 1 - Beginners round", "Round of music"]
          },
          "description": {
            "type": ["string", "null"],
            "description": "Description of the round",
            "examples": ["This round contains simple questions"]
          },
          "type": {
            "$ref": "#/components/schemas/PackageRoundType"
          },
          "themes": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/PackageTheme" },
            "description": "Themes in the round"
          }
        },
        "required": ["name", "order", "type", "themes"],
        "description": "Round structure for package"
      },
      "PackageCreateInputData": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "description": "Title of the package",
            "examples": ["Trivia Night", "Anime pack 2025"]
          },
          "description": {
            "type": ["string", "null"],
            "description": "Description of the package",
            "examples": ["This is package description"]
          },
          "language": {
            "type": ["string", "null"],
            "description": "Language of the package",
            "examples": ["en", "ua"]
          },
          "ageRestriction": {
            "$ref": "#/components/schemas/AgeRestriction",
            "description": "Age restriction"
          },
          "logo": {
            "oneOf": [
              { "$ref": "#/components/schemas/PackageLogoFileInput" },
              { "type": "null" }
            ],
            "description": "Logo file for the package"
          },
          "tags": {
            "type": ["array", "null"],
            "items": {
              "$ref": "#/components/schemas/PackageTag"
            },
            "description": "Tags for the package. Can be null or an array of tag objects",
            "examples": [
              [
                { "id": 18, "tag": "anime" },
                { "id": 19, "tag": "movie" },
                { "id": 20, "tag": "general" },
                { "id": 21, "tag": "games" }
              ],
              [
                { "id": 22, "tag": "trivia" },
                { "id": 23, "tag": "fun" }
              ],
              null
            ]
          },
          "rounds": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/PackageRound" },
            "description": "Rounds in the package"
          }
        },
        "required": ["title", "ageRestriction", "rounds"],
        "description": "Input for creating a new package; author is set via authentication"
      },
      "InputSocketIOAuth": {
        "type": "object",
        "properties": {
          "socketId": {
            "type": "string",
            "examples": ["Q04nceF-7noEw52hAAAD"]
          }
        }
      },
      "PlayerRole": {
        "type": "string",
        "enum": ["showman", "player", "spectator"]
      },
      "RestrictionsEventData": {
        "type": "object",
        "properties": {
          "muted": {
            "type": "boolean",
            "examples": [false],
            "description": "If true - player muted in in-game chat"
          },
          "restricted": {
            "type": "boolean",
            "examples": [false],
            "description": "Restricted players can only join as spectators"
          },
          "banned": {
            "type": "boolean",
            "examples": [false],
            "description": "If true - player is banned from the game"
          }
        }
      },
      "PlayerMeta": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "examples": [200]
          },
          "username": {
            "type": "string",
            "examples": ["Asion001"]
          },
          "avatar": {
            "type": ["string", "null"],
            "examples": ["https://example.image.com", null]
          }
        }
      },
      "PlayerData": {
        "type": "object",
        "description": "Player DTO. This is also sent to everyone when player joins game",
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/PlayerMeta"
          },
          "role": {
            "$ref": "#/components/schemas/PlayerRole"
          },
          "restrictionData": {
            "$ref": "#/components/schemas/RestrictionsEventData"
          },
          "score": {
            "type": "integer",
            "examples": [200, 500, 1250]
          },
          "slot": {
            "type": ["integer", "null"],
            "examples": [0, 1, 2, null],
            "description": "Slot null has only showman and spectators"
          },
          "status": {
            "type": "string",
            "enum": ["in-game", "disconnected"]
          }
        }
      },
      "SocketIOGameJoinInput": {
        "type": "object",
        "properties": {
          "gameId": {
            "type": "string",
            "examples": ["Q31X"]
          },
          "role": {
            "type": "string",
            "enum": ["showman", "player", "spectator"],
            "examples": ["player"]
          }
        }
      },
      "SocketIOGameLeaveEventPayload": {
        "type": "object",
        "properties": {
          "user": {
            "type": "integer",
            "examples": [5],
            "description": "Emitted to everyone in game, including sender. ID of the user who left the game"
          }
        }
      },
      "SocketIOChatMessageEventPayload": {
        "description": "Emitted to everyone in game, including sender. Data that sent to all players in room on chat message",
        "allOf": [
          { "$ref": "#/components/schemas/SocketIOChatMessageContent" },
          {
            "type": "object",
            "properties": {
              "uuid": {
                "type": "string",
                "format": "uuid",
                "examples": ["d232e56c-2522-48b7-a74e-f467e9eef2e1"]
              },
              "user": {
                "type": "integer",
                "examples": [5],
                "description": "ID of the user who sent the message"
              },
              "timestamp": {
                "type": "string",
                "format": "date-time",
                "examples": ["2024-01-01T00:00:00Z"]
              }
            }
          }
        ]
      },
      "SocketIOUserChangeEventPayload": {
        "type": "object",
        "description": "Data sent to subscribed players when a user's information is updated",
        "properties": {
          "userData": {
            "$ref": "#/components/schemas/ResponseUser"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "examples": ["2024-01-01T00:00:00Z"],
            "description": "When the user change occurred"
          }
        },
        "required": ["userData", "timestamp"]
      },
      "SocketIONextRoundEventPayload": {
        "type": "object",
        "properties": {
          "gameState": {
            "$ref": "#/components/schemas/GameState"
          }
        }
      },
      "SocketIOGameJoinEventPayload": {
        "type": "object",
        "description": "This data sent to player when he joins game",
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/SocketIOGameJoinMeta"
          },
          "players": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PlayerData"
            },
            "description": "Players in the game"
          },
          "gameState": {
            "description": "Current game state",
            "$ref": "#/components/schemas/GameState"
          },
          "chatMessages": {
            "type": "array",
            "description": "Last 100 chat messages, sorted 'DESC'",
            "items": {
              "$ref": "#/components/schemas/SocketIOChatMessageEventPayload"
            }
          }
        }
      },
      "SocketIOGameJoinMeta": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "examples": ["Game title"]
          }
        }
      },
      "GameState": {
        "type": "object",
        "properties": {
          "questionState": {
            "type": ["string", "null"],
            "enum": [
              "choosing",
              "theme_elimination",
              "bidding",
              "answering",
              "reviewing",
              "showing",
              null
            ],
            "examples": ["choosing"]
          },
          "isPaused": {
            "type": "boolean",
            "examples": [false]
          },
          "currentRound": {
            "oneOf": [
              { "$ref": "#/components/schemas/SocketIOGameStateRoundData" },
              { "type": "null" }
            ]
          },
          "currentQuestion": {
            "oneOf": [
              { "$ref": "#/components/schemas/PackageQuestionData" },
              { "type": "null" }
            ]
          },
          "answeringPlayer": {
            "type": ["integer", "null"],
            "description": "Id of player who is currently answering",
            "examples": [727]
          },
          "answeredPlayers": {
            "type": ["array", "null"],
            "items": {
              "$ref": "#/components/schemas/GameStateAnsweredPlayer"
            }
          },
          "skippedPlayers": {
            "type": ["array", "null"],
            "items": {
              "type": "integer"
            },
            "description": "IDs of players who skipped the question",
            "examples": [727]
          },
          "timer": {
            "oneOf": [
              { "$ref": "#/components/schemas/GameStateTimer" },
              { "type": "null" }
            ]
          },
          "finalRoundData": {
            "oneOf": [
              { "$ref": "#/components/schemas/FinalRoundGameData" },
              { "type": "null" }
            ]
          },
          "currentTurnPlayerId": {
            "oneOf": [{ "type": "integer" }, { "type": "null" }],
            "description": "Id of player whose turn it is to pick a question or eliminate theme"
          },
          "readyPlayers": {
            "oneOf": [
              {
                "type": "array",
                "items": {
                  "type": "integer"
                },
                "description": "Array of player IDs who are ready to start the game"
              },
              { "type": "null" }
            ],
            "examples": [[1, 2, 3]]
          }
        }
      },
      "GameStateTimer": {
        "type": ["object", "null"],
        "properties": {
          "startedAt": {
            "type": "string",
            "description": "Describes when timer started",
            "format": "date-time",
            "examples": ["2024-01-01T00:00:00Z"]
          },
          "durationMs": {
            "type": "integer",
            "description": "Describes how long timer should last until it's ended",
            "examples": [30000]
          },
          "elapsedMs": {
            "type": "integer",
            "description": "This value written only when timer paused because of something. Helps to track passed time and resume timer correctly",
            "examples": [5000]
          }
        }
      },
      "GameStateAnsweredPlayer": {
        "type": "object",
        "properties": {
          "player": {
            "type": "integer",
            "description": "Id of answered player",
            "examples": [727]
          },
          "result": {
            "type": "integer",
            "examples": [-1000, 500, 0, -250]
          },
          "score": {
            "type": "integer",
            "examples": [-1150, 220, 0, -230]
          },
          "answerType": {
            "$ref": "#/components/schemas/SocketIOGameAnswerType"
          }
        }
      },
      "SocketIOGameStartEventPayload": {
        "type": "object",
        "description": "This data sent to all players in room when game is started",
        "properties": {
          "currentRound": {
            "$ref": "#/components/schemas/SocketIOGameStateRoundData"
          }
        }
      },
      "SocketIOPlayerReadinessEventPayload": {
        "type": "object",
        "description": "This data is sent to all players in room when a player changes their ready status",
        "properties": {
          "playerId": {
            "type": "integer",
            "description": "ID of the player who changed their ready status",
            "examples": [1]
          },
          "isReady": {
            "type": "boolean",
            "description": "Whether the player is ready or not",
            "examples": [true]
          },
          "readyPlayers": {
            "type": "array",
            "items": {
              "type": "integer"
            },
            "description": "Array of all currently ready player IDs",
            "examples": [[1, 2, 3]]
          },
          "autoStartTriggered": {
            "type": "boolean",
            "description": "Optional field indicating if game auto-start was triggered",
            "examples": [true]
          }
        },
        "required": ["playerId", "isReady", "readyPlayers"]
      },
      "SocketIOGameStateRoundData": {
        "type": "object",
        "description": "Info about current round of the game",
        "properties": {
          "order": {
            "$ref": "#/components/schemas/PackageEntitiesOrder"
          },
          "name": {
            "type": "string",
            "examples": ["Round 1"]
          },
          "type": {
            "$ref": "#/components/schemas/PackageRoundType"
          },
          "description": {
            "type": ["string", "null"],
            "examples": ["This package is focused on anime questions"]
          },
          "themes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SocketIOGameStateThemeData"
            }
          }
        }
      },
      "SocketIOGameStateThemeData": {
        "type": "object",
        "description": "Info about theme of the round",
        "properties": {
          "order": {
            "$ref": "#/components/schemas/PackageEntitiesOrder"
          },
          "name": {
            "type": "string",
            "examples": ["Theme 1"]
          },
          "description": {
            "type": ["string", "null"],
            "examples": ["In this theme you have to guess character name"]
          },
          "questions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SocketIOGameStateQuestionData"
            }
          }
        }
      },
      "SocketIOGameStateQuestionData": {
        "type": "object",
        "description": "Info about question of the theme",
        "properties": {
          "id": {
            "type": "integer"
          },
          "order": {
            "$ref": "#/components/schemas/PackageEntitiesOrder"
          },
          "price": {
            "type": ["integer", "null"],
            "description": "Price is null only if price is hidden",
            "examples": [200, null]
          },
          "questionComment": {
            "type": ["string", "null"],
            "description": "Comment that clarify what have to be answered on this question",
            "examples": ["Answer full name of character", null]
          },
          "isPlayed": {
            "type": "boolean",
            "description": "Marks if question was played before to disable picking action"
          }
        }
      },
      "SocketIOEvents": {
        "type": "string",
        "enum": ["error", "disconnect", "connection", "games", "chat-message"],
        "examples": ["error"]
      },
      "SocketIOUserReceiveEvents": {
        "type": "string",
        "enum": ["user-change"],
        "examples": ["user-change"]
      },
      "SocketIOGameSendEvents": {
        "type": "string",
        "enum": [
          "join",
          "user-leave",
          "game-data",
          "start",
          "question-pick",
          "question-answer",
          "question-finish",
          "answer-submitted",
          "next-round",
          "answer-result",
          "skip-question-force",
          "game-pause",
          "game-unpause",
          "theme-eliminate",
          "question-skip",
          "question-unskip",
          "player-ready",
          "player-unready",
          "player-kicked",
          "player-restricted",
          "player-role-change",
          "score-changed",
          "player-slot-change",
          "turn-player-changed",
          "final-bid-submit",
          "final-answer-submit",
          "final-answer-review",
          "final-phase-complete",
          "final-question-data",
          "final-submit-end",
          "final-auto-loss"
        ],
        "examples": ["join"]
      },
      "SocketIOGameReceiveEvents": {
        "type": "string",
        "enum": [
          "join",
          "start",
          "user-leave",
          "game-data",
          "question-answer",
          "question-data",
          "question-finish",
          "answer-submitted",
          "answer-result",
          "next-round",
          "game-finished",
          "game-pause",
          "game-unpause",
          "theme-eliminate",
          "question-skip",
          "question-unskip",
          "player-ready",
          "player-unready",
          "player-kicked",
          "player-restricted",
          "player-role-change",
          "score-changed",
          "player-slot-change",
          "turn-player-changed",
          "final-bid-submit",
          "final-answer-submit",
          "final-answer-review",
          "final-phase-complete",
          "final-question-data",
          "final-submit-end",
          "final-auto-loss"
        ],
        "examples": ["join"]
      },
      "SocketIOGameSkipEventPayload": {
        "type": "object",
        "description": "Data sent to all players when player skips a question",
        "properties": {
          "playerId": {
            "type": "integer",
            "description": "ID of the player who skipped the question",
            "examples": [727]
          }
        }
      },
      "SocketIOGameUnskipEventPayload": {
        "type": "object",
        "description": "Data sent to all players when player unskips a question",
        "properties": {
          "playerId": {
            "type": "integer",
            "description": "ID of the player who unskipped the question",
            "examples": [727]
          }
        }
      },
      "SocketIOGamePauseEventPayload": {
        "type": "object",
        "description": "Data sent to all players when the game is paused",
        "properties": {
          "timer": {
            "$ref": "#/components/schemas/GameStateTimer"
          }
        }
      },
      "SocketIOGameUnpauseEventPayload": {
        "type": "object",
        "description": "Data sent to all players when the game is unpaused",
        "properties": {
          "timer": {
            "$ref": "#/components/schemas/GameStateTimer"
          }
        }
      },
      "SocketIOPlayerKickInput": {
        "type": "object",
        "description": "Data sent to kick a player from the game (showman only)",
        "properties": {
          "playerId": {
            "type": "integer",
            "description": "ID of the player to kick",
            "examples": [123]
          }
        },
        "required": ["playerId"]
      },
      "SocketIOPlayerKickEventPayload": {
        "type": "object",
        "description": "Data sent to all players when a player is kicked",
        "properties": {
          "playerId": {
            "type": "integer",
            "description": "ID of the player who was kicked",
            "examples": [123]
          }
        }
      },
      "SocketIOPlayerRestrictionInput": {
        "type": "object",
        "description": "Data sent to update player restrictions (showman only)",
        "properties": {
          "playerId": {
            "type": "integer",
            "description": "ID of the player to restrict",
            "examples": [123]
          },
          "muted": {
            "type": "boolean",
            "description": "Whether the player is muted",
            "examples": [true]
          },
          "restricted": {
            "type": "boolean",
            "description": "Whether the player is restricted",
            "examples": [false]
          },
          "banned": {
            "type": "boolean",
            "description": "Whether the player is banned",
            "examples": [false]
          }
        },
        "required": ["playerId", "muted", "restricted", "banned"]
      },
      "SocketIOPlayerRestrictionEventPayload": {
        "type": "object",
        "description": "Data sent to all players when player restrictions are updated",
        "properties": {
          "playerId": {
            "type": "integer",
            "description": "ID of the player whose restrictions were updated",
            "examples": [123]
          },
          "muted": {
            "type": "boolean",
            "description": "Whether the player is muted",
            "examples": [true]
          },
          "restricted": {
            "type": "boolean",
            "description": "Whether the player is restricted",
            "examples": [false]
          },
          "banned": {
            "type": "boolean",
            "description": "Whether the player is banned",
            "examples": [false]
          }
        }
      },
      "SocketIOPlayerRoleChangeInput": {
        "type": "object",
        "description": "Data sent to change a player's role",
        "properties": {
          "playerId": {
            "oneOf": [{ "type": "integer" }, { "type": "null" }],
            "description": "ID of the player whose role to change",
            "examples": [123, null]
          },
          "newRole": {
            "$ref": "#/components/schemas/PlayerRole",
            "description": "The new role for the player"
          }
        },
        "required": ["playerId", "newRole"]
      },
      "SocketIOPlayerRoleChangeEventPayload": {
        "type": "object",
        "description": "Data sent to all players when a player's role is changed",
        "properties": {
          "playerId": {
            "type": "integer",
            "description": "ID of the player whose role was changed",
            "examples": [123]
          },
          "newRole": {
            "$ref": "#/components/schemas/PlayerRole",
            "description": "The new role of the player"
          },
          "players": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PlayerData"
            },
            "description": "Updated list of all players with their current data"
          }
        }
      },
      "SocketIOPlayerScoreChangeInput": {
        "type": "object",
        "description": "Data sent to change a player's score (showman only)",
        "properties": {
          "playerId": {
            "type": "integer",
            "description": "ID of the player whose score to change",
            "examples": [123]
          },
          "newScore": {
            "type": "integer",
            "description": "The new score for the player",
            "examples": [1500]
          }
        },
        "required": ["playerId", "newScore"]
      },
      "SocketIOPlayerScoreChangeEventPayload": {
        "type": "object",
        "description": "Data sent to all players when a player's score is changed",
        "properties": {
          "playerId": {
            "type": "integer",
            "description": "ID of the player whose score was changed",
            "examples": [123]
          },
          "newScore": {
            "type": "integer",
            "description": "The new score of the player",
            "examples": [1500]
          }
        }
      },
      "SocketIOPlayerSlotChangeInput": {
        "type": "object",
        "description": "Data sent to change a player's slot",
        "properties": {
          "targetSlot": {
            "type": "integer",
            "description": "The target slot to change to (0-indexed)",
            "examples": [0, 1, 2]
          },
          "playerId": {
            "type": ["integer", "null"],
            "description": "Optional: ID of the player whose slot to change (for showman use)",
            "examples": [123, null]
          }
        },
        "required": ["targetSlot"]
      },
      "SocketIOPlayerSlotChangeEventPayload": {
        "type": "object",
        "description": "Data sent to all players when a player changes their slot",
        "properties": {
          "playerId": {
            "type": "integer",
            "description": "ID of the player who changed their slot",
            "examples": [123]
          },
          "newSlot": {
            "type": "integer",
            "description": "The new slot number (0-indexed)",
            "examples": [0, 1, 2]
          },
          "players": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PlayerData"
            },
            "description": "Updated list of all players with their current data"
          }
        }
      },
      "SocketIOTurnPlayerChangeInput": {
        "type": "object",
        "description": "Data sent to change the current turn player (showman only)",
        "properties": {
          "newTurnPlayerId": {
            "type": ["integer", "null"],
            "description": "ID of the player who should have the turn, or null to clear",
            "examples": [123, null]
          }
        },
        "required": ["newTurnPlayerId"]
      },
      "SocketIOTurnPlayerChangeEventPayload": {
        "type": "object",
        "description": "Data sent to all players when the turn player is changed",
        "properties": {
          "newTurnPlayerId": {
            "type": ["integer", "null"],
            "description": "ID of the player who now has the turn, or null if cleared",
            "examples": [123, null]
          }
        }
      },
      "SocketIOChatMessageContent": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "examples": ["Hello guys!"],
            "maxLength": 255
          }
        }
      },
      "SocketIOQuestionPickEventInput": {
        "type": "object",
        "description": "Send this data to pick a question",
        "properties": {
          "questionId": {
            "type": "integer",
            "description": "ID of the picked question",
            "examples": [25]
          }
        }
      },
      "SocketIOQuestionDataEventPayload": {
        "type": "object",
        "description": "Data sent to players when a question is picked, containing question details and timer",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/PackageQuestionData"
          },
          "timer": {
            "$ref": "#/components/schemas/GameStateTimer"
          }
        }
      },
      "SocketIOQuestionAnswerEventPayload": {
        "type": "object",
        "description": "Data sent to all players when a player starts answering a question",
        "properties": {
          "userId": {
            "type": "integer",
            "description": "ID of the user who is answering",
            "examples": [727]
          },
          "timer": {
            "$ref": "#/components/schemas/GameStateTimer"
          }
        }
      },
      "SocketIOAnswerSubmittedEventData": {
        "type": "object",
        "description": "Data sent to all players when a player submits an answer. Same data should be sent by answering player to the server",
        "properties": {
          "answerText": {
            "type": ["string", "null"],
            "description": "Player's answer text",
            "examples": ["I don't know"]
          }
        }
      },
      "SocketIOAnswerResultEventPayload": {
        "type": "object",
        "description": "Data sent to all players when the showman evaluates an answer",
        "properties": {
          "answerResult": {
            "oneOf": [
              { "$ref": "#/components/schemas/GameStateAnsweredPlayer" },
              { "type": "null" }
            ]
          },
          "timer": {
            "oneOf": [
              { "$ref": "#/components/schemas/GameStateTimer" },
              { "type": "null" }
            ]
          },
          "answerFiles": {
            "oneOf": [
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PackageQuestionFile"
                }
              },
              { "type": "null" }
            ]
          },
          "answerText": {
            "oneOf": [
              { "$ref": "#/components/schemas/QuestionAnswerText" },
              { "type": "null" }
            ]
          }
        }
      },
      "SocketIOAnswerResultInput": {
        "type": "object",
        "description": "Data sent by the showman to evaluate a player's answer",
        "properties": {
          "scoreResult": {
            "type": "integer",
            "description": "Score result of the answer; positive for correct, negative for incorrect, zero for skip",
            "examples": [500, -500, 0]
          },
          "answerType": {
            "$ref": "#/components/schemas/SocketIOGameAnswerType"
          }
        }
      },
      "PackageQuestionData": {
        "type": "object",
        "properties": {
          "id": {
            "type": ["integer", "null"],
            "examples": [187]
          },
          "type": {
            "$ref": "#/components/schemas/QuestionType"
          },
          "order": {
            "$ref": "#/components/schemas/PackageEntitiesOrder"
          },
          "price": {
            "type": ["integer", "null"],
            "description": "Price is null only if price is hidden",
            "examples": [200, null]
          },
          "isHidden": {
            "type": "boolean",
            "default": false,
            "description": "Whether the question is hidden",
            "examples": [false]
          },
          "text": {
            "type": ["string", "null"],
            "description": "Question text",
            "examples": ["Where is Kyiv located?"]
          },
          "answerHint": {
            "type": ["string", "null"],
            "description": "Hint for the answer",
            "examples": ["It's in Europe"]
          },
          "answerText": {
            "oneOf": [
              { "$ref": "#/components/schemas/QuestionAnswerText" },
              { "type": "null" }
            ]
          },
          "answerDelay": {
            "type": ["integer", "null"],
            "description": "Delay in milliseconds before being able to answer, if applicable",
            "default": 4000,
            "examples": [7000]
          },
          "questionComment": {
            "type": ["string", "null"],
            "description": "Comment or note about the question",
            "examples": ["You have to say full country name"]
          },
          "questionFiles": {
            "oneOf": [
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PackageQuestionFile"
                }
              },
              { "type": "null" }
            ]
          },
          "answerFiles": {
            "oneOf": [
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PackageQuestionFile"
                }
              },
              { "type": "null" }
            ]
          },
          "subType": {
            "$ref": "#/components/schemas/QuestionSubType"
          },
          "maxPrice": {
            "oneOf": [
              { "$ref": "#/components/schemas/QuestionMaxPrice" },
              { "type": "null" }
            ]
          },
          "allowedPrices": {
            "oneOf": [
              { "$ref": "#/components/schemas/QuestionAllowedPrices" },
              { "type": "null" }
            ]
          },
          "transferType": {
            "oneOf": [
              { "$ref": "#/components/schemas/QuestionTransferType" },
              { "type": "null" }
            ]
          },
          "priceMultiplier": {
            "oneOf": [
              { "$ref": "#/components/schemas/QuestionPriceMultiplier" },
              { "type": "null" }
            ]
          },
          "showDelay": {
            "oneOf": [
              { "$ref": "#/components/schemas/QuestionShowDelay" },
              { "type": "null" }
            ]
          },
          "answers": {
            "oneOf": [
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/QuestionChoiceAnswers"
                }
              },
              { "type": "null" }
            ]
          }
        }
      },
      "ThemeEliminateInput": {
        "type": "object",
        "description": "Data sent to eliminate a theme in final round",
        "properties": {
          "themeId": {
            "type": "integer",
            "description": "ID of the theme to eliminate",
            "examples": [5]
          }
        },
        "required": ["themeId"]
      },
      "ThemeEliminateOutput": {
        "type": "object",
        "description": "Data sent to all players when a theme is eliminated in final round",
        "properties": {
          "themeId": {
            "type": "integer",
            "description": "ID of the eliminated theme",
            "examples": [5]
          },
          "eliminatedBy": {
            "type": "integer",
            "description": "ID of the player who eliminated the theme",
            "examples": [123]
          },
          "nextPlayerId": {
            "type": ["integer", "null"],
            "description": "Next player to pick theme, null if elimination complete",
            "examples": [124]
          }
        },
        "required": ["themeId", "eliminatedBy"]
      },
      "FinalAnswerSubmitInput": {
        "type": "object",
        "description": "Data sent by player to submit final answer in final round",
        "properties": {
          "answerText": {
            "type": "string",
            "description": "Player's final answer text",
            "maxLength": 500,
            "examples": ["This is my final answer"]
          }
        },
        "required": ["answerText"]
      },
      "FinalAnswerSubmitOutput": {
        "type": "object",
        "description": "Data sent to all players when a final answer is submitted",
        "properties": {
          "playerId": {
            "type": "integer",
            "description": "ID of the player who submitted the answer",
            "examples": [123]
          },
          "answerText": {
            "type": "string",
            "description": "The submitted answer text",
            "examples": ["This is my final answer"]
          }
        },
        "required": ["playerId", "answerText"]
      },
      "FinalBidSubmitInput": {
        "type": "object",
        "description": "Data sent by player to submit bid in final round",
        "properties": {
          "bid": {
            "type": "integer",
            "description": "Player's bid amount",
            "examples": [500]
          }
        },
        "required": ["bid"]
      },
      "FinalBidSubmitOutput": {
        "type": "object",
        "description": "Data sent to all players when a bid is submitted",
        "properties": {
          "playerId": {
            "type": "integer",
            "description": "ID of the player who submitted the bid",
            "examples": [123]
          },
          "bidAmount": {
            "type": "integer",
            "description": "The bid amount",
            "examples": [500]
          }
        },
        "required": ["playerId", "bidAmount"]
      },
      "FinalAnswerReviewInput": {
        "type": "object",
        "description": "Data sent by showman to review a final answer",
        "properties": {
          "answerId": {
            "type": "string",
            "description": "ID of the answer being reviewed",
            "examples": ["answer-123"]
          },
          "isCorrect": {
            "type": "boolean",
            "description": "Whether the answer is correct",
            "examples": [true]
          }
        },
        "required": ["answerId", "isCorrect"]
      },
      "FinalAnswerReviewOutput": {
        "type": "object",
        "description": "Data sent to all players when an answer is reviewed",
        "properties": {
          "answerId": {
            "type": "string",
            "description": "ID of the reviewed answer",
            "examples": ["answer-123"]
          },
          "playerId": {
            "type": "integer",
            "description": "ID of the player whose answer was reviewed",
            "examples": [123]
          },
          "isCorrect": {
            "type": "boolean",
            "description": "Whether the answer was correct",
            "examples": [true]
          },
          "scoreChange": {
            "type": "integer",
            "description": "Score change for the player",
            "examples": [500]
          }
        },
        "required": ["answerId", "playerId", "isCorrect", "scoreChange"]
      },
      "SocketIOGameAnswerType": {
        "type": "string",
        "enum": ["correct", "wrong", "skip"],
        "examples": ["correct"]
      },
      "PackageRoundType": {
        "type": "string",
        "enum": ["simple", "final"],
        "description": "Type of package round",
        "examples": ["simple"]
      },
      "FinalRoundPhase": {
        "type": "string",
        "enum": ["theme_elimination", "bidding", "answering", "reviewing"],
        "description": "Phase of the final round",
        "examples": ["theme_elimination"]
      },
      "FinalRoundAnswer": {
        "type": "object",
        "description": "Player answer in final round",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique ID of the answer",
            "examples": ["answer-123"]
          },
          "playerId": {
            "type": "integer",
            "description": "ID of the player submitting the answer",
            "examples": [123]
          },
          "answer": {
            "type": "string",
            "description": "The player's answer text",
            "examples": ["The answer is 42"]
          },
          "isCorrect": {
            "type": ["boolean", "null"],
            "description": "Whether the answer is correct (null if not yet reviewed)",
            "examples": [true]
          },
          "autoLoss": {
            "type": ["boolean", "null"],
            "description": "Whether this is an automatic loss",
            "examples": [false]
          },
          "submittedAt": {
            "type": "string",
            "format": "date-time",
            "description": "When the answer was submitted",
            "examples": ["2024-01-01T00:00:00Z"]
          },
          "reviewedAt": {
            "type": ["string", "null"],
            "format": "date-time",
            "description": "When the answer was reviewed",
            "examples": ["2024-01-01T00:01:00Z"]
          }
        },
        "required": ["id", "playerId", "answer", "submittedAt"]
      },
      "FinalRoundGameData": {
        "type": "object",
        "description": "Final round game state data",
        "properties": {
          "phase": {
            "$ref": "#/components/schemas/FinalRoundPhase"
          },
          "turnOrder": {
            "type": "array",
            "items": {
              "type": "integer"
            },
            "description": "Turn order for final round theme elimination",
            "examples": [[1, 2, 3]]
          },
          "bids": {
            "type": "object",
            "additionalProperties": {
              "type": "integer"
            },
            "description": "Player bids mapped by player ID",
            "examples": [{ "123": 500, "124": 300 }]
          },
          "answers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FinalRoundAnswer"
            },
            "description": "All submitted answers"
          },
          "eliminatedThemes": {
            "type": "array",
            "items": {
              "type": "integer"
            },
            "description": "IDs of eliminated themes",
            "examples": [[1, 3, 5]]
          }
        },
        "required": [
          "phase",
          "turnOrder",
          "bids",
          "answers",
          "eliminatedThemes"
        ]
      },
      "FinalPhaseCompleteEventData": {
        "type": "object",
        "description": "Data sent when a final round phase is completed",
        "properties": {
          "phase": {
            "$ref": "#/components/schemas/FinalRoundPhase"
          },
          "nextPhase": {
            "$ref": "#/components/schemas/FinalRoundPhase"
          },
          "timer": {
            "$ref": "#/components/schemas/GameStateTimer"
          }
        },
        "required": ["phase", "nextPhase"]
      },
      "FinalQuestionEventData": {
        "type": "object",
        "description": "Data sent when final round question is revealed",
        "properties": {
          "questionData": {
            "$ref": "#/components/schemas/FinalRoundQuestionData"
          }
        },
        "required": ["questionData"]
      },
      "FinalSubmitEndEventData": {
        "type": "object",
        "description": "Data sent when final round answering phase ends",
        "properties": {
          "phase": {
            "$ref": "#/components/schemas/FinalRoundPhase"
          },
          "nextPhase": {
            "oneOf": [
              { "$ref": "#/components/schemas/FinalRoundPhase" },
              { "type": "null" }
            ]
          },
          "allReviews": {
            "oneOf": [
              {
                "type": "array",
                "items": { "$ref": "#/components/schemas/AnswerReviewData" }
              },
              { "type": "null" }
            ],
            "description": "All answers revealed when transitioning to reviewing phase"
          }
        },
        "required": ["phase"]
      },
      "QuestionFinishEventPayload": {
        "type": "object",
        "description": "Data sent to all players when a question is finished (showing answer)",
        "properties": {
          "answerFiles": {
            "oneOf": [
              {
                "type": "array",
                "items": { "$ref": "#/components/schemas/PackageQuestionFile" }
              },
              { "type": "null" }
            ]
          },
          "answerText": {
            "oneOf": [
              { "$ref": "#/components/schemas/QuestionAnswerText" },
              { "type": "null" }
            ]
          },
          "nextTurnPlayerId": {
            "oneOf": [{ "type": "integer" }, { "type": "null" }],
            "description": "ID of the next player to take their turn, null if no next player (game finished)"
          }
        },
        "required": ["answerFiles", "answerText"]
      },
      "FinalAutoLossEventData": {
        "type": "object",
        "description": "Data sent when a player automatically loses in final round",
        "properties": {
          "playerId": {
            "type": "integer",
            "description": "ID of the player who lost",
            "examples": [123]
          },
          "reason": {
            "$ref": "#/components/schemas/FinalAnswerLossReason"
          }
        },
        "required": ["playerId", "reason"]
      },
      "FinalAnswerLossReason": {
        "type": "string",
        "enum": ["empty_answer", "timeout"],
        "description": "Reason for automatic loss in final round",
        "examples": ["empty_answer"]
      },
      "FinalRoundQuestionData": {
        "type": "object",
        "description": "Question data for final round",
        "properties": {
          "themeId": {
            "type": "integer",
            "description": "ID of the question theme",
            "examples": [1]
          },
          "themeName": {
            "type": "string",
            "description": "Name of the question theme",
            "examples": ["Geography"]
          },
          "question": {
            "type": "object",
            "description": "Question state data",
            "properties": {
              "id": {
                "type": "integer",
                "description": "Question ID",
                "examples": [187]
              },
              "order": {
                "type": "integer",
                "description": "Question order",
                "examples": [1]
              },
              "price": {
                "type": ["integer", "null"],
                "description": "Question price/points",
                "examples": [500]
              },
              "questionComment": {
                "type": ["string", "null"],
                "description": "Question comment",
                "examples": ["Geography question"]
              },
              "isPlayed": {
                "type": "boolean",
                "description": "Whether question has been played",
                "examples": [false]
              }
            },
            "required": ["id", "order", "isPlayed"]
          }
        },
        "required": ["themeId", "themeName", "question"]
      },
      "AnswerReviewData": {
        "type": "object",
        "description": "Data for reviewing final round answers",
        "properties": {
          "playerId": {
            "type": "integer",
            "description": "ID of the player",
            "examples": [123]
          },
          "answerId": {
            "type": "string",
            "description": "Unique ID of the answer",
            "examples": ["answer-123"]
          },
          "answerText": {
            "type": "string",
            "description": "Player's answer text",
            "examples": ["Paris"]
          },
          "scoreChange": {
            "type": "integer",
            "description": "Score change for the player",
            "examples": [500]
          },
          "answerType": {
            "$ref": "#/components/schemas/FinalAnswerType"
          },
          "isCorrect": {
            "type": "boolean",
            "description": "Whether the answer is correct (optional, present after review)",
            "examples": [true]
          }
        },
        "required": [
          "playerId",
          "answerId",
          "answerText",
          "scoreChange",
          "answerType"
        ]
      },
      "FinalAnswerType": {
        "type": "string",
        "enum": ["correct", "wrong", "auto_loss"],
        "description": "Type of final round answer result",
        "examples": ["correct"]
      }
    }
  }
}
